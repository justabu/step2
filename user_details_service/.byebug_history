q
c
intermediate_array
n
counter
n
results_array
n
lengths.map{|num| num if num!=0 }.compact.min
number
n
lengths.map{|num| num if num!=0 }.compact.min
s
n
s
n
intermediate_array
results_array
n
s
results_array
intermediate_array
n
q
lengths.map{|num| num if num!=0 }.compact.min
lengths.min
lengths
lengths.min
number
lengths
lengths.map{|num| num if num!=0 }.compact.min
number - lengths.min
n
number
lengths.map{|num| num if num!=0 }.compact.min
s
intermediate_array
n
lengths
s
intermediate_array
results_array
n
results_array
n
intermediate_array
n
c
q
res
n
res.compact.count
res
n
s
maxes
q
intermediate_array
n
intermediate_array
n
c
intermediate_array
n
intermediate_array
c
q
intermediate_array
n
lengths
s
n
counter
resulting_array
n
s
n
intermediate_array
n
counter
n
s
n
intermediate_array
resulting_array
c
q
lengths.min
s
lengths
n
s
resulting_array
intermediate_array
n
intermediate_array
resulting_array
n
s
n
intermediate_array
n
counter
resulting_array
q
c
n
ncounter
n
number
s
lengths
c
n
lengths
intermediate_array
n
s
n
intermediate_array
n
counter
n
c
q
couter
n
counter
n
number
counter
n
counter
n
number
n
c
n
q
n
counter
n
q
counter ++
counter++
counter
n
q
c
number
c
lengths
c
lengths
n
c
q
resulting_array
n
q
n
c
resulting_array
n
counter
number
n
number
n
number
intermediate_array
c
n
q
n
lengths
resulting_array
n
q
intermediate_array
c
intermediate_array.max
intermediate_array
q
cq
c
q
lengths
c
q
c
lengths
intermediate_array
c
n
c
n
